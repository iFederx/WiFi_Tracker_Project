EVENT: Application startup  
DO:  
	-Call context.loadRooms()
	-Call context.orchestrate()

EVENT: Station connects to passive socket and pairing completes with success.  
DO:  
	-Create a station handler SH [TO IMPLEMENT]
	-Call context.TryAddstation(AllowAsynchronous=true) [TO COMPLETE THE IMPLEMENTATION] look if there is a saved configuration for the station.
	THERE IS A SAVED CONFIGURATION:  
		-It is called context.loadStation()
		-This means that context.tryAddStation() will return NOT null. If this happens, send signal to station that can begin sniffing
	THERE IS NO SAVED CONFIGURATION:  
		-Make station led blink (SH.switchLedBlink(true))
		-Open GUI asking for which room. The execution will then move to GUI thread, so copy relevant data, as NameMAC and LedBlinkHandle. 
		 If a GUI already open, queue the station to configurate into the gui object, so that when current is finished, this will 
		 be immediately asked for. Show NameMAC on screen
		SELECTED ROOM DOES NO EXIST
			-Ask for room name and dimensions, and pass them to Context.createRoom()
			-Call context.saveRoom()
		-Update GUI, asking for the position of the station into that room
		-Call context.createStation()
		-Call context.saveStation() [TO IMPLEMENT]
		-Stop led blinking ((SH.switchLedBlink(false)))
		-Send signal to station that it can begin sniffing
		-If another element in queue to be configurate, start from "THERE IS NO SAVED CONFIGURATION"

EVENT: User asks for configuration. That is, context.switchCalibration() is called.
DO:
	-Look Calibrator.cs for what to do

OTHER USEFUL APIs:
	-To get the Station object given an id, call contex.getStation(). It may return null, in that case call context.tryAddStation(AllowAsynchronous=false):
	 this may happen if the station has been inactive for a while (i.e. connection dropped), and has not restarted, but is trying to send packets as usual.
	 If this also returns null, ignore all the packets from that station for the current file sending (something nasty is happening: the station is sending packets as it was configured but has never been configured).
	-To ship a complete packet to analysis, call contex.getAnalyzer().sendtoAnalysysQueue()
	-To know how many stations are there in a room, call context.getNumberStationPerRoom()
	-Every once in a while (like 5 seconds), check that there are not uncomplete packet. if there is an uncomplete packet, before discarding, do:
	 while(context.checkstationAliveness(packetToBeDiscarded.receivings[0].station.location.room)); then check again if the number of receivings is still 
	 lower than context.getNumberStationPerRoom(). If still lower, discard. If equal or higher, send to analysis.
	


